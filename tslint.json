{
  "extends": [
    "tslint:recommended",
    "tslint-react-hooks",
    "tslint-config-prettier"
  ],
  "rulesDirectory": ["node_modules/tslint-microsoft-contrib"],
  "rules": {
    /*******************************************
     * TSLint Rules                            *
     * https://palantir.github.io/tslint/rules *
     *******************************************/

    /**
     * Disallows the comma operator to be used.
     *
     * Using the comma operator can create a potential for many non-obvious
     * bugs or lead to misunderstanding of code.
     *
     * https://palantir.github.io/tslint/rules/ban-comma-operator/
     */
    "ban-comma-operator": [true],

    /**
     * Enforces a threshold of cyclomatic complexity.
     *
     * Cyclomatic complexity is assessed for each function of any type. A
     * starting value of 0 is assigned and this value is then incremented for
     * every statement which can branch the control flow within the function.
     * The following statements and expressions contribute to cyclomatic
     * complexity:
     *
     * * catch
     * * if and ? :
     * * || and && due to short-circuit evaluation
     * * for, for in and for of loops
     * * while and do while loops
     * * case clauses that contain statements
     *
     * Cyclomatic complexity is a code metric which indicates the level of
     * complexity in a function. High cyclomatic complexity indicates confusing
     * code which may be prone to errors or difficult to modify.
     *
     * It’s better to have smaller, single-purpose functions with
     * self-documenting names.
     *
     * https://palantir.github.io/tslint/rules/cyclomatic-complexity/
     */
    "cyclomatic-complexity": [true, 8],

    /**
     * Warns when deprecated APIs are used.
     *
     * Any usage of an identifier with the `@deprecated` JSDoc annotation will
     * trigger a warning. See http://usejsdoc.org/tags-deprecated.html
     *
     * https://palantir.github.io/tslint/rules/deprecation/
     */
    "deprecation": true,

    /**
     * Ensures that files have a single responsibility so that that classes
     * each exist in their own file.
     *
     * The one required argument is an integer indicating the maximum number of
     * classes that can appear in a file. An optional argument
     * `"exclude-class-expressions"` can be provided to exclude class
     * expressions from the overall class count.
     *
     * https://palantir.github.io/tslint/rules/max-classes-per-file/
     */
    "max-classes-per-file": [true, 1],

    /**
     * Disabled because we have found this rule to be more disruptive than it
     * is useful.
     *
     * https://palantir.github.io/tslint/rules/member-ordering/
     */
    "member-ordering": [false],

    /**
     * Console logs can be useful for debugging but should not be in
     * production.
     *
     * This setting allows console logs but gives a warning which shows up
     * in editors using the TSLint plugins or when the linter is run in the
     * terminal.
     *
     * https://palantir.github.io/tslint/rules/no-console/
     */
    "no-console": [
      true,
      {
        "severity": "warning"
      }
    ],

    /**
     * Disallows multiple import statements from the same module.
     *
     * Using a single import statement per module will make the code clearer
     * because you can see everything being imported from that module on one
     * line.
     *
     * https://palantir.github.io/tslint/rules/no-duplicate-imports/
     */
    "no-duplicate-imports": [true],

    /**
     * Prevents duplicate cases in switch statements.
     *
     * https://palantir.github.io/tslint/rules/no-duplicate-switch-case/
     */
    "no-duplicate-switch-case": [true],

    /**
     * Disallows duplicate variable declarations in the same block scope.
     *
     * This rule is only useful when using the var keyword - the compiler will
     * detect redeclarations of let and const variables.
     *
     * A variable can be reassigned if necessary - there’s no good reason to
     * have a duplicate variable declaration.
     *
     * You can specify "check-parameters" to check for variables with the same
     * name as a parameter.
     *
     * https://palantir.github.io/tslint/rules/no-duplicate-variable/
     */
    "no-duplicate-variable": [true, "check-parameters"],

    /**
     * Disallows importing modules that are not listed as dependency in the
     * project’s package.json
     *
     * Disallows importing transient dependencies and modules installed above
     * your package’s root directory.
     *
     * Allowing enzyme for react tests
     *
     * https://palantir.github.io/tslint/rules/no-implicit-dependencies/
     */
    "no-implicit-dependencies": [true, ["enzyme"]],

    /**
     * Disallows unnecessary `return await`.
     *
     * An async function always wraps the return value in a Promise. Using
     * `return await` just adds extra time before the overreaching promise is
     * resolved without changing the semantics.
     *
     * https://palantir.github.io/tslint/rules/no-return-await/
     */
    "no-return-await": [true],

    /**
     * Forbids array literals to contain missing elements.
     *
     * Missing elements are probably an accidentally duplicated comma.
     *
     * https://palantir.github.io/tslint/rules/no-sparse-arrays/
     */
    "no-sparse-arrays": [true],

    /**
     * Disallows unnecessary references to `this`.
     *
     * Assigning a variable to `this` instead of properly using arrow lambdas
     * may be a symptom of pre-ES6 practices or not managing scope well.
     *
     * Instead of storing a reference to `this` and using it inside a
     * `function () {` you should use `() =>` arrow lambdas, as they preserve
     * `this` scope for you.
     *
     * https://palantir.github.io/tslint/rules/no-this-assignment/
     */
    "no-this-assignment": [true, "allow-destructuring"],

    /**
     * Requiring objects to have sorted keys is painful and we have found
     * logical sorting to be more valuable than the slightly lowered chance of
     * merge conflicts provided by this rule.
     *
     * https://palantir.github.io/tslint/rules/object-literal-sort-keys/
     */
    "object-literal-sort-keys": [false],

    /**
     * Enforces the use of the ES2018 object spread operator over
     * `Object.assign()` where appropriate.
     *
     * Object spread allows for better type checking and inference.
     *
     * https://palantir.github.io/tslint/rules/prefer-object-spread/
     */
    "prefer-object-spread": [true],

    /**
     * For accessibility of your website, anchor element link text should be at
     * least 4 characters long. Links with the same HREF should have the same
     * link text. Links that point to different HREFs should have different
     * link text. This can be relaxed to allow differences in cases using
     * `ignore-case` option. You can also allow differences in leading/trailing
     * whitespace by adding `{"ignore-whitespace": "trim"}` option or all
     * whitespace by adding `{"ignore-whitespace": "all"}` option. Links with
     * images and text content, the alt attribute should be unique to the text
     * content or empty. An an anchor element's href prop value must not be
     * undefined, null, or just #.
     */
    "react-a11y-anchors": [true],

    /**
     * For accessibility of your website, enforce that elements that do not
     * support ARIA roles, states, and properties do not have those attributes.
     */
    "react-a11y-aria-unsupported-elements": [true],

    /**
     * For accessibility of your website, elements with event handlers must
     * have explicit role or implicit role.
     */
    "react-a11y-event-has-role": [true],

    /**
     * For accessibility of your website, enforce that inputs element with
     * `type="image"` must have non-empty alt attribute.
     */
    "react-a11y-image-button-has-alt": [true],

    /**
     * Enforce that an `img` element contains the `alt` attribute or
     * `role='presentation'` for a decorative image. All images must have `alt`
     * text to convey their purpose and meaning to screen reader users.
     * Besides, the `alt` attribute specifies an alternate text for an image, if
     * the image cannot be displayed.
     */
    "react-a11y-img-has-alt": [true],

    /**
     * For accessibility of your website, HTML elements must have a lang
     * attribute and the attribute must be a valid language code.
     */
    "react-a11y-lang": [true],

    /**
     * For accessibility of your website, HTML meta elements must not have
     * `http-equiv="refresh"`.
     */
    "react-a11y-meta": [true],

    /**
     * For accessibility of your website, enforce usage of `onBlur` over
     * `onChange` on select menus.
     */
    "react-a11y-no-onchange": [true],

    /**
     * For accessibility of your website, enforce all `aria-*` attributes are
     * valid. Elements cannot use an invalid `aria-*` attribute. This rule will
     * fail if it finds an `aria-*` attribute that is not listed in WAI-ARIA
     * states and properties.
     */
    "react-a11y-props": [true],

    /**
     * For accessibility of your website, enforce the type of aria state and
     * property values are correct.
     */
    "react-a11y-proptypes": [true],

    /**
     * For accessibility of your website, enforce that required input elements
     * have aria-required set to true.
     */
    "react-a11y-required": [true],

    /**
     * For accessibility of your website, elements with aria roles must have
     * all required attributes according to the role.
     */
    "react-a11y-role-has-required-aria-props": [true],

    /**
     * For accessibility of your website, enforce that elements with explicit
     * or implicit roles defined contain only `aria-*` properties supported by
     * that `role`. Many aria attributes (states and properties) can only be
     * used on elements with particular roles. Some elements have implicit
     * roles, such as `<a href='hrefValue' />`, which will be resolved to
     * `role='link'`. A reference for the implicit roles can be found at
     * Default Implicit ARIA Semantics.
     */
    "react-a11y-role-supports-aria-props": [true],

    /**
     * For accessibility of your website, elements with aria roles must use a
     * **valid**, **non-abstract** aria role. A reference to role definitions
     * can be found at WAI-ARIA roles.
     */
    "react-a11y-role": [true],

    /**
     * For accessibility of your website, enforce tabindex value is
     * **not greater than zero**. Avoid positive tabindex attribute values to
     * synchronize the flow of the page with keyboard tab order.
     */
    "react-a11y-tabindex-no-positive": [true],

    /**
     * For accessibility of your website, HTML title elements must not be
     * empty, must be more than one word, and must not be more than 60
     * characters long.
     */
    "react-a11y-titles": [true],

    /**
     * For security reasons, anchor tags with `target="_blank"` should also
     * include `rel="noreferrer"`. In order to restrict the behavior
     * `window.opener` access, the original page needs to add a
     * `rel="noopener"` attribute to any link that has `target="_blank"`.
     * However, Firefox does not support that tag, so you should actually use
     * `rel="noopener noreferrer"` for full coverage.
     */
    "react-anchor-blank-noopener": [true],

    /**
     * React iframes must specify a sandbox attribute. If specified as an empty
     * string, this attribute enables extra restrictions on the content that
     * can appear in the inline frame. The value of the attribute can either be
     * an empty string (all the restrictions are applied), or a space-separated
     * list of tokens that lift particular restrictions. You many not use both
     * allow-scripts and allow-same-origin at the same time, as that allows the
     * embedded document to programmatically remove the sandbox attribute in
     * some scenarios.
     */
    "react-iframe-missing-sandbox": [true],

    /**
     * The description for this is really long. Go check the readme:
     * https://github.com/Microsoft/tslint-microsoft-contrib#supported-rules
     */
    "react-this-binding-issue": [true],

    /**
     * Requires type definitions to exist.
     *
     * A bit too overbearing.
     */
    "typedef": [false],

    /*********************************************************
     * Miscellaneous Rules                                   *
     *********************************************************/

    /**
     * Enforces [Rules of Hooks](https://reactjs.org/docs/hooks-rules.html).
     *
     * https://github.com/Gelio/tslint-react-hooks#tslint-rules-of-hooks
     */
    "react-hooks-nesting": "error",

    /*********************************************************
     * Microsoft Contrib Rules                               *
     * https://github.com/Microsoft/tslint-microsoft-contrib *
     *********************************************************/

    /**
     * The name of the exported module must match the filename of the source
     * file. This is case-insensitive by default but ignores file extension.
     * It can be configured to be case-insensitive or to allow names matching
     * a regex. For example, to allow names that differ only in case and an
     * exported name like myChartOptions, then configure the rule like this:
     * `"export-name": [true, { "ignore-case": true, "allow": ["myChartOptions"] }]`.
     * You can also just give a list of allowed names, like
     * `"export-name": [true, "myChartOptions"]`.
     */
    "export-name": [true],

    /**
     * Do not use insecure sources for random bytes. Use a secure random number
     * generator instead. Bans all uses of `Math.random` and
     * `crypto.pseudoRandomBytes`. Better alternatives are `crypto.randomBytes`
     * and `window.crypto.getRandomValues`
     */
    "insecure-random": [true],

    /**
     * Do not use banned terms: `caller`, `callee`, `eval`, `arguments`.
     *
     * These terms refer to functions or properties that should not be used, so
     * it is best practice to simply avoid them.
     */
    "no-banned-terms": [true],

    /**
     * Do not use constant expressions in conditions.
     */
    "no-constant-condition": [true],

    /**
     * Do not delete expressions. Only properties should be deleted.
     */
    "no-delete-expression": [true],

    /**
     * Do not declare a variable only to return it from the function on the
     * next line. It is always less code to simply return the expression that
     * initializes the variable.
     */
    "no-unnecessary-local-variable": [true],

    /**
     * Do not write a method that only calls super() on the parent method with
     * the same arguments. You can safely remove methods like this and
     * Javascript will correctly dispatch the method to the parent object.
     */
    "no-unnecessary-override": [true],

    /**
     * Do not use with statements. Assign the item to a new variable instead.
     */
    "no-with-statement": [true],

    /**
     * Avoid timing attacks by not making direct string comparisons to
     * sensitive data. Do not compare against variables named password,
     * secret, api, apiKey, token, auth, pass, or hash. For more info
     * see the referenced article.
     *
     * https://snyk.io/blog/node-js-timing-attack-ccc-ctf
     */
    "possible-timing-attack": [true],

    /**
     * When a Promise instance is created, then either the `reject()` or
     * `resolve()` parameter must be called on it within all code branches in
     * the scope.
     */
    "promise-must-complete": [true],

    /**
     * Simpler attributes in JSX and TSX files helps keep code clean and
     * readable. Separate complex expressions into their own line and use clear
     * variable names to make your code more understandable.
     */
    "use-simple-attributes": [true]
  }
}
